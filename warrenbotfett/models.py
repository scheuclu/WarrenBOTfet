# generated by datamodel-codegen:
#   filename:  trading212_openapi.json
#   timestamp: 2025-06-28T11:37:13+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class Secrets(BaseModel):
    trading212_api_key: str
    supabase_url: str
    supabase_key: str


class Account(BaseModel):
    currencyCode: Optional[str] = Field(
        None, description="ISO 4217", examples=["USD"], max_length=3, min_length=3
    )
    id: Optional[int] = None


class DividendCashAction(Enum):
    REINVEST = "REINVEST"
    TO_ACCOUNT_CASH = "TO_ACCOUNT_CASH"


class AccountBucketDetailedResponse(BaseModel):
    creationDate: Optional[datetime] = None
    dividendCashAction: Optional[DividendCashAction] = None
    endDate: Optional[datetime] = None
    goal: Optional[float] = None
    icon: Optional[str] = None
    id: Optional[int] = None
    initialInvestment: Optional[float] = None
    instrumentShares: Optional[dict[str, float]] = None
    name: Optional[str] = None
    publicUrl: Optional[str] = None


class Status(Enum):
    AHEAD = "AHEAD"
    ON_TRACK = "ON_TRACK"
    BEHIND = "BEHIND"


class Cash(BaseModel):
    blocked: Optional[float] = None
    free: Optional[float] = None
    invested: Optional[float] = None
    pieCash: Optional[float] = Field(None, description="Invested cash in pies")
    ppl: Optional[float] = None
    result: Optional[float] = None
    total: Optional[float] = None


class DividendDetails(BaseModel):
    gained: Optional[float] = None
    inCash: Optional[float] = None
    reinvested: Optional[float] = None


class DuplicateBucketRequest(BaseModel):
    icon: Optional[str] = None
    name: Optional[str] = None


class EnqueuedReportResponse(BaseModel):
    reportId: Optional[int] = None


class Executor(Enum):
    API = "API"
    IOS = "IOS"
    ANDROID = "ANDROID"
    WEB = "WEB"
    SYSTEM = "SYSTEM"
    AUTOINVEST = "AUTOINVEST"


class FillType(Enum):
    TOTV = "TOTV"
    OTC = "OTC"


class Status1(Enum):
    LOCAL = "LOCAL"
    UNCONFIRMED = "UNCONFIRMED"
    CONFIRMED = "CONFIRMED"
    NEW = "NEW"
    CANCELLING = "CANCELLING"
    CANCELLED = "CANCELLED"
    PARTIALLY_FILLED = "PARTIALLY_FILLED"
    FILLED = "FILLED"
    REJECTED = "REJECTED"
    REPLACING = "REPLACING"
    REPLACED = "REPLACED"


class TimeValidity(Enum):
    DAY = "DAY"
    GOOD_TILL_CANCEL = "GOOD_TILL_CANCEL"


class Type(Enum):
    LIMIT = "LIMIT"
    STOP = "STOP"
    MARKET = "MARKET"
    STOP_LIMIT = "STOP_LIMIT"


class HistoryDividendItem(BaseModel):
    amount: Optional[float] = Field(None, description="In account currency")
    amountInEuro: Optional[float] = None
    grossAmountPerShare: Optional[float] = Field(
        None, description="In instrument currency"
    )
    paidOn: Optional[datetime] = None
    quantity: Optional[float] = None
    reference: Optional[str] = None
    ticker: Optional[str] = None
    type: Optional[str] = None


class Type1(Enum):
    WITHDRAW = "WITHDRAW"
    DEPOSIT = "DEPOSIT"
    FEE = "FEE"
    TRANSFER = "TRANSFER"


class HistoryTransactionItem(BaseModel):
    amount: Optional[float] = Field(None, description="In the account currency")
    dateTime: Optional[datetime] = None
    reference: Optional[str] = Field(None, description="ID")
    type: Optional[Type1] = None


class Name(Enum):
    DELISTED = "DELISTED"
    SUSPENDED = "SUSPENDED"
    NO_LONGER_TRADABLE = "NO_LONGER_TRADABLE"
    MAX_POSITION_SIZE_REACHED = "MAX_POSITION_SIZE_REACHED"
    APPROACHING_MAX_POSITION_SIZE = "APPROACHING_MAX_POSITION_SIZE"
    COMPLEX_INSTRUMENT_APP_TEST_REQUIRED = "COMPLEX_INSTRUMENT_APP_TEST_REQUIRED"


class Severity(Enum):
    IRREVERSIBLE = "IRREVERSIBLE"
    REVERSIBLE = "REVERSIBLE"
    INFORMATIVE = "INFORMATIVE"


class InstrumentIssue(BaseModel):
    name: Optional[Name] = None
    severity: Optional[Severity] = None


class InvestmentResult(BaseModel):
    priceAvgInvestedValue: Optional[float] = None
    priceAvgResult: Optional[float] = None
    priceAvgResultCoef: Optional[float] = None
    priceAvgValue: Optional[float] = None


class LimitRequest(BaseModel):
    limitPrice: Optional[float] = Field(None, examples=[100.23])
    quantity: Optional[float] = Field(None, examples=[0.1])
    ticker: Optional[str] = Field(None, examples=["AAPL_US_EQ"])
    timeValidity: Optional[TimeValidity] = Field(
        None, description="Expiration", examples=["DAY"]
    )


class MarketRequest(BaseModel):
    quantity: Optional[float] = Field(None, examples=[0.1])
    ticker: Optional[str] = Field(None, examples=["AAPL_US_EQ"])


class Strategy(Enum):
    QUANTITY = "QUANTITY"
    VALUE = "VALUE"


class Type2(Enum):
    LIMIT = "LIMIT"
    STOP = "STOP"
    MARKET = "MARKET"
    STOP_LIMIT = "STOP_LIMIT"


class Order(BaseModel):
    creationTime: Optional[datetime] = None
    filledQuantity: Optional[float] = Field(
        None, description="Applicable to quantity orders"
    )
    filledValue: Optional[float] = Field(None, description="Applicable to value orders")
    id: Optional[int] = None
    limitPrice: Optional[float] = Field(
        None, description="Applicable to LIMIT and STOP_LIMIT orders"
    )
    quantity: Optional[float] = Field(None, description="Applicable to quantity orders")
    status: Optional[Status1] = None
    stopPrice: Optional[float] = Field(
        None, description="Applicable to STOP and STOP_LIMIT orders"
    )
    strategy: Optional[Strategy] = None
    ticker: Optional[str] = Field(
        None,
        description="Unique instrument identifier. Get from the /instruments endpoint",
        examples=["AAPL_US_EQ"],
    )
    type: Optional[Type2] = None
    value: Optional[float] = Field(None, description="Applicable to value orders")


class PaginatedResponseHistoryDividendItem(BaseModel):
    items: Optional[list[HistoryDividendItem]] = None
    nextPagePath: Optional[str] = None


class PaginatedResponseHistoryTransactionItem(BaseModel):
    items: Optional[list[HistoryTransactionItem]] = None
    nextPagePath: Optional[str] = None


class PieRequest(BaseModel):
    dividendCashAction: Optional[DividendCashAction] = None
    endDate: Optional[datetime] = None
    goal: Optional[float] = Field(
        None, description="Total desired value of the pie in account currency"
    )
    icon: Optional[str] = None
    instrumentShares: Optional[dict[str, float]] = Field(
        None, examples=[{"AAPL_US_EQ": 0.5, "MSFT_US_EQ": 0.5}]
    )
    name: Optional[str] = None


class Code(Enum):
    SellingEquityNotOwned = "SellingEquityNotOwned"
    CantLegalyTradeException = "CantLegalyTradeException"
    InsufficientResources = "InsufficientResources"
    InsufficientValueForStocksSell = "InsufficientValueForStocksSell"
    TargetPriceTooFar = "TargetPriceTooFar"
    TargetPriceTooClose = "TargetPriceTooClose"
    NotEligibleForISA = "NotEligibleForISA"
    ShareLendingAgreementNotAccepted = "ShareLendingAgreementNotAccepted"
    InstrumentNotFound = "InstrumentNotFound"
    MaxEquityBuyQuantityExceeded = "MaxEquityBuyQuantityExceeded"
    MaxEquitySellQuantityExceeded = "MaxEquitySellQuantityExceeded"
    LimitPriceMissing = "LimitPriceMissing"
    StopPriceMissing = "StopPriceMissing"
    TickerMissing = "TickerMissing"
    QuantityMissing = "QuantityMissing"
    MaxQuantityExceeded = "MaxQuantityExceeded"
    InvalidValue = "InvalidValue"
    InsufficientFreeForStocksException = "InsufficientFreeForStocksException"
    MinValueExceeded = "MinValueExceeded"
    MinQuantityExceeded = "MinQuantityExceeded"
    PriceTooFar = "PriceTooFar"
    UNDEFINED = "UNDEFINED"
    NotAvailableForRealMoneyAccounts = "NotAvailableForRealMoneyAccounts"


class PlaceOrderError(BaseModel):
    clarification: Optional[str] = None
    code: Optional[Code] = None


class Frontend(Enum):
    API = "API"
    IOS = "IOS"
    ANDROID = "ANDROID"
    WEB = "WEB"
    SYSTEM = "SYSTEM"
    AUTOINVEST = "AUTOINVEST"


class Position(BaseModel):
    averagePrice: Optional[float] = Field(default=None, description="Average buy price")
    currentPrice: Optional[float] = Field(default=None, description="Current price")
    frontend: Optional[Frontend] = Field(None, description="Origin of the asset")
    fxPpl: Optional[float] = Field(
        None,
        description="Forex movement impact, only applies to positions with instrument currency that differs from the accounts'",
    )
    initialFillDate: Optional[datetime] = Field(
        default=None, description="Date when this position was initially filled."
    )
    maxBuy: Optional[float] = Field(
        None,
        description="Additional quantity that can be bought witht he current fee assets",  # TODO: Is this correct?
    )
    maxSell: Optional[float] = Field(None, description="Quantity that can be sold")
    pieQuantity: Optional[float] = Field(None, description="Invested in pies")
    ppl: Optional[float] = None
    quantity: Optional[float] = None
    ticker: Optional[str] = Field(
        None, description="Unique instrument identifier", examples=["AAPL_US_EQ"]
    )


class PositionRequest(BaseModel):
    ticker: Optional[str] = None


class ReportDataIncluded(BaseModel):
    includeDividends: Optional[bool] = None
    includeInterest: Optional[bool] = None
    includeOrders: Optional[bool] = None
    includeTransactions: Optional[bool] = None


class Status3(Enum):
    Queued = "Queued"
    Processing = "Processing"
    Running = "Running"
    Canceled = "Canceled"
    Failed = "Failed"
    Finished = "Finished"


class ReportResponse(BaseModel):
    dataIncluded: Optional[ReportDataIncluded] = None
    downloadLink: Optional[str] = None
    reportId: Optional[int] = None
    status: Optional[Status3] = None
    timeFrom: Optional[datetime] = None
    timeTo: Optional[datetime] = None


class StopLimitRequest(BaseModel):
    limitPrice: Optional[float] = Field(None, examples=[100.23])
    quantity: Optional[float] = Field(None, examples=[0.1])
    stopPrice: Optional[float] = Field(None, examples=[100.23])
    ticker: Optional[str] = Field(None, examples=["AAPL_US_EQ"])
    timeValidity: Optional[TimeValidity] = Field(
        None, description="Expiration", examples=["DAY"]
    )


class StopRequest(BaseModel):
    quantity: Optional[float] = Field(None, examples=[0.1])
    stopPrice: Optional[float] = Field(None, examples=[100.23])
    ticker: Optional[str] = Field(None, examples=["AAPL_US_EQ"])
    timeValidity: Optional[TimeValidity] = Field(
        None, description="Expiration", examples=["DAY"]
    )


class Name1(Enum):
    COMMISSION_TURNOVER = "COMMISSION_TURNOVER"
    CURRENCY_CONVERSION_FEE = "CURRENCY_CONVERSION_FEE"
    FINRA_FEE = "FINRA_FEE"
    FRENCH_TRANSACTION_TAX = "FRENCH_TRANSACTION_TAX"
    PTM_LEVY = "PTM_LEVY"
    STAMP_DUTY = "STAMP_DUTY"
    STAMP_DUTY_RESERVE_TAX = "STAMP_DUTY_RESERVE_TAX"
    TRANSACTION_FEE = "TRANSACTION_FEE"


class Tax(BaseModel):
    fillId: Optional[str] = None
    name: Optional[Name1] = None
    quantity: Optional[float] = None
    timeCharged: Optional[datetime] = None


class Type3(Enum):
    OPEN = "OPEN"
    CLOSE = "CLOSE"
    BREAK_START = "BREAK_START"
    BREAK_END = "BREAK_END"
    PRE_MARKET_OPEN = "PRE_MARKET_OPEN"
    AFTER_HOURS_OPEN = "AFTER_HOURS_OPEN"
    AFTER_HOURS_CLOSE = "AFTER_HOURS_CLOSE"
    OVERNIGHT_OPEN = "OVERNIGHT_OPEN"


class TimeEvent(BaseModel):
    date: Optional[datetime] = None
    type: Optional[Type3] = None


class Type4(Enum):
    CRYPTOCURRENCY = "CRYPTOCURRENCY"
    ETF = "ETF"
    FOREX = "FOREX"
    FUTURES = "FUTURES"
    INDEX = "INDEX"
    STOCK = "STOCK"
    WARRANT = "WARRANT"
    CRYPTO = "CRYPTO"
    CVR = "CVR"
    CORPACT = "CORPACT"


class TradeableInstrument(BaseModel):
    addedOn: Optional[datetime] = Field(None, description="On the platform since")
    currencyCode: Optional[str] = Field(
        None, description="ISO 4217", examples=["USD"], max_length=3, min_length=3
    )
    isin: Optional[str] = None
    maxOpenQuantity: Optional[float] = None
    minTradeQuantity: Optional[float] = Field(
        None, description="A single order must be equal to or exceed this value"
    )
    name: Optional[str] = None
    shortName: Optional[str] = None
    ticker: Optional[str] = Field(
        None, description="Unique identifier", examples=["AAPL_US_EQ"]
    )
    type: Optional[Type4] = Field(None, examples=["ETF"])
    workingScheduleId: Optional[int] = Field(
        None, description="Get items in the /exchanges endpoint"
    )


class WorkingSchedule(BaseModel):
    id: Optional[int] = None
    timeEvents: Optional[list[TimeEvent]] = None


class AccountBucketInstrumentResult(BaseModel):
    currentShare: Optional[float] = None
    expectedShare: Optional[float] = None
    issues: Optional[list[InstrumentIssue]] = None
    ownedQuantity: Optional[float] = None
    result: Optional[InvestmentResult] = None
    ticker: Optional[str] = None


class AccountBucketInstrumentsDetailedResponse(BaseModel):
    instruments: Optional[list[AccountBucketInstrumentResult]] = None
    settings: Optional[AccountBucketDetailedResponse] = None


class AccountBucketResultResponse(BaseModel):
    cash: Optional[float] = Field(
        None, description="Amount of money put into the pie in account currency"
    )
    dividendDetails: Optional[DividendDetails] = None
    id: Optional[int] = None
    progress: Optional[float] = Field(
        None, description="Progress of the pie based on the set goal", examples=[0.5]
    )
    result: Optional[InvestmentResult] = None
    status: Optional[Status] = Field(
        None, description="Status of the pie based on the set goal"
    )


class Exchange(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    workingSchedules: Optional[list[WorkingSchedule]] = None


class HistoricalOrder(BaseModel):
    dateCreated: Optional[datetime] = None
    dateExecuted: Optional[datetime] = None
    dateModified: Optional[datetime] = None
    executor: Optional[Executor] = None
    fillCost: Optional[float] = Field(None, description="In the instrument currency")
    fillId: Optional[int] = None
    fillPrice: Optional[float] = Field(None, description="In the instrument currency")
    fillResult: Optional[float] = None
    fillType: Optional[FillType] = None
    filledQuantity: Optional[float] = Field(
        None, description="Applicable to quantity orders"
    )
    filledValue: Optional[float] = Field(None, description="Applicable to value orders")
    id: Optional[int] = None
    limitPrice: Optional[float] = Field(None, description="Applicable to limit orders")
    orderedQuantity: Optional[float] = Field(
        None, description="Applicable to quantity orders"
    )
    orderedValue: Optional[float] = Field(
        None, description="Applicable to value orders"
    )
    parentOrder: Optional[int] = None
    status: Optional[Status1] = None
    stopPrice: Optional[float] = Field(None, description="Applicable to stop orders")
    taxes: Optional[list[Tax]] = None
    ticker: Optional[str] = None
    timeValidity: Optional[TimeValidity] = Field(
        None, description="Applicable to stop, limit and stopLimit orders"
    )
    type: Optional[Type] = None


class PaginatedResponseHistoricalOrder(BaseModel):
    items: Optional[list[HistoricalOrder]] = None
    nextPagePath: Optional[str] = None


class PublicReportRequest(BaseModel):
    dataIncluded: Optional[ReportDataIncluded] = None
    timeFrom: Optional[datetime] = None
    timeTo: Optional[datetime] = None
